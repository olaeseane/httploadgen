<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="445"><g><title>dyld`dyld4::prepare (1 samples, 0.22%)</title><rect x="0.0000%" y="485" width="0.2247%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>dyld`dyld4::notifyMonitoringDyldMain (1 samples, 0.22%)</title><rect x="0.0000%" y="469" width="0.2247%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>dyld`dyld4::RemoteNotificationResponder::sendMessage (1 samples, 0.22%)</title><rect x="0.0000%" y="453" width="0.2247%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>dyld`mach_msg_overwrite (1 samples, 0.22%)</title><rect x="0.0000%" y="437" width="0.2247%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>dyld`mach_msg2_trap (1 samples, 0.22%)</title><rect x="0.0000%" y="421" width="0.2247%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_protect (1 samples, 0.22%)</title><rect x="0.2247%" y="293" width="0.2247%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.4747%" y="303.50"></text></g><g><title>httploadcli`tokio::runtime::builder::Builder::build (2 samples, 0.45%)</title><rect x="0.2247%" y="405" width="0.4494%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="2"/><text x="0.4747%" y="415.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::worker::Launch::launch (2 samples, 0.45%)</title><rect x="0.2247%" y="389" width="0.4494%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="2"/><text x="0.4747%" y="399.50"></text></g><g><title>httploadcli`tokio::runtime::blocking::pool::spawn_blocking (2 samples, 0.45%)</title><rect x="0.2247%" y="373" width="0.4494%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="2"/><text x="0.4747%" y="383.50"></text></g><g><title>httploadcli`tokio::runtime::blocking::pool::Spawner::spawn_blocking (2 samples, 0.45%)</title><rect x="0.2247%" y="357" width="0.4494%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.4747%" y="367.50"></text></g><g><title>httploadcli`tokio::runtime::blocking::pool::Spawner::spawn_task (2 samples, 0.45%)</title><rect x="0.2247%" y="341" width="0.4494%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="2"/><text x="0.4747%" y="351.50"></text></g><g><title>httploadcli`std::thread::Builder::spawn_unchecked (2 samples, 0.45%)</title><rect x="0.2247%" y="325" width="0.4494%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="2"/><text x="0.4747%" y="335.50"></text></g><g><title>httploadcli`std::sys::unix::thread::Thread::new (2 samples, 0.45%)</title><rect x="0.2247%" y="309" width="0.4494%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="2"/><text x="0.4747%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (1 samples, 0.22%)</title><rect x="0.4494%" y="293" width="0.2247%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.6994%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.22%)</title><rect x="0.4494%" y="277" width="0.2247%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.6994%" y="287.50"></text></g><g><title>dyld`start (4 samples, 0.90%)</title><rect x="0.0000%" y="501" width="0.8989%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="511.50"></text></g><g><title>httploadcli`main (3 samples, 0.67%)</title><rect x="0.2247%" y="485" width="0.6742%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="3"/><text x="0.4747%" y="495.50"></text></g><g><title>httploadcli`std::rt::lang_start_internal (3 samples, 0.67%)</title><rect x="0.2247%" y="469" width="0.6742%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="3"/><text x="0.4747%" y="479.50"></text></g><g><title>httploadcli`std::rt::lang_start::_{{closure}} (3 samples, 0.67%)</title><rect x="0.2247%" y="453" width="0.6742%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="3"/><text x="0.4747%" y="463.50"></text></g><g><title>httploadcli`std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.67%)</title><rect x="0.2247%" y="437" width="0.6742%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="3"/><text x="0.4747%" y="447.50"></text></g><g><title>httploadcli`httploadcli::main (3 samples, 0.67%)</title><rect x="0.2247%" y="421" width="0.6742%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="3"/><text x="0.4747%" y="431.50"></text></g><g><title>httploadcli`tokio::runtime::runtime::Runtime::block_on (1 samples, 0.22%)</title><rect x="0.6742%" y="405" width="0.2247%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="0.9242%" y="415.50"></text></g><g><title>httploadcli`tokio::runtime::context::runtime::enter_runtime (1 samples, 0.22%)</title><rect x="0.6742%" y="389" width="0.2247%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="0.9242%" y="399.50"></text></g><g><title>httploadcli`tokio::runtime::context::blocking::BlockingRegionGuard::block_on (1 samples, 0.22%)</title><rect x="0.6742%" y="373" width="0.2247%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="0.9242%" y="383.50"></text></g><g><title>httploadcli`clap_builder::derive::Parser::parse (1 samples, 0.22%)</title><rect x="0.6742%" y="357" width="0.2247%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1"/><text x="0.9242%" y="367.50"></text></g><g><title>httploadcli`clap_builder::builder::command::Command::get_matches_from (1 samples, 0.22%)</title><rect x="0.6742%" y="341" width="0.2247%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="1"/><text x="0.9242%" y="351.50"></text></g><g><title>httploadcli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="0.6742%" y="325" width="0.2247%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="1"/><text x="0.9242%" y="335.50"></text></g><g><title>httploadcli`indicatif::progress_bar::TickerControl::run (1 samples, 0.22%)</title><rect x="1.1236%" y="421" width="0.2247%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="1.3736%" y="431.50"></text></g><g><title>httploadcli`indicatif::state::BarState::update_estimate_and_draw (1 samples, 0.22%)</title><rect x="1.1236%" y="405" width="0.2247%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="1.3736%" y="415.50"></text></g><g><title>httploadcli`indicatif::state::BarState::draw (1 samples, 0.22%)</title><rect x="1.1236%" y="389" width="0.2247%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="1.3736%" y="399.50"></text></g><g><title>httploadcli`indicatif::style::ProgressStyle::format_state (1 samples, 0.22%)</title><rect x="1.1236%" y="373" width="0.2247%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="1.3736%" y="383.50"></text></g><g><title>httploadcli`core::fmt::write (1 samples, 0.22%)</title><rect x="1.1236%" y="357" width="0.2247%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="1.3736%" y="367.50"></text></g><g><title>httploadcli`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.22%)</title><rect x="1.1236%" y="341" width="0.2247%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="1.3736%" y="351.50"></text></g><g><title>httploadcli`&lt;indicatif::style::PaddedStringDisplay as core::fmt::Display&gt;::fmt (1 samples, 0.22%)</title><rect x="1.1236%" y="325" width="0.2247%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="1.3736%" y="335.50"></text></g><g><title>httploadcli`console::utils::measure_text_width (1 samples, 0.22%)</title><rect x="1.1236%" y="309" width="0.2247%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="1.3736%" y="319.50"></text></g><g><title>httploadcli`console::ansi::strip_ansi_codes (1 samples, 0.22%)</title><rect x="1.1236%" y="293" width="0.2247%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="1.3736%" y="303.50"></text></g><g><title>httploadcli`&lt;console::ansi::AnsiCodeIterator as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.22%)</title><rect x="1.1236%" y="277" width="0.2247%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="1"/><text x="1.3736%" y="287.50"></text></g><g><title>httploadcli`console::ansi::find_ansi_code_exclusive (1 samples, 0.22%)</title><rect x="1.1236%" y="261" width="0.2247%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="1"/><text x="1.3736%" y="271.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (1 samples, 0.22%)</title><rect x="1.3483%" y="309" width="0.2247%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="1"/><text x="1.5983%" y="319.50"></text></g><g><title>httploadcli`__floattidf (1 samples, 0.22%)</title><rect x="3.8202%" y="293" width="0.2247%" height="15" fill="rgb(232,182,51)" fg:x="17" fg:w="1"/><text x="4.0702%" y="303.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (2 samples, 0.45%)</title><rect x="4.0449%" y="293" width="0.4494%" height="15" fill="rgb(231,60,39)" fg:x="18" fg:w="2"/><text x="4.2949%" y="303.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::park::Parker::park (1 samples, 0.22%)</title><rect x="4.4944%" y="293" width="0.2247%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="4.7444%" y="303.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (4 samples, 0.90%)</title><rect x="4.7191%" y="293" width="0.8989%" height="15" fill="rgb(235,93,37)" fg:x="21" fg:w="4"/><text x="4.9691%" y="303.50"></text></g><g><title>httploadcli`parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.45%)</title><rect x="5.6180%" y="277" width="0.4494%" height="15" fill="rgb(213,116,39)" fg:x="25" fg:w="2"/><text x="5.8680%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.45%)</title><rect x="5.6180%" y="261" width="0.4494%" height="15" fill="rgb(222,207,29)" fg:x="25" fg:w="2"/><text x="5.8680%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (25 samples, 5.62%)</title><rect x="6.9663%" y="245" width="5.6180%" height="15" fill="rgb(206,96,30)" fg:x="31" fg:w="25"/><text x="7.2163%" y="255.50">libsyst..</text></g><g><title>httploadcli`parking_lot::condvar::Condvar::wait_until_internal (29 samples, 6.52%)</title><rect x="6.2921%" y="261" width="6.5169%" height="15" fill="rgb(218,138,4)" fg:x="28" fg:w="29"/><text x="6.5421%" y="271.50">httploadc..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.22%)</title><rect x="12.5843%" y="245" width="0.2247%" height="15" fill="rgb(250,191,14)" fg:x="56" fg:w="1"/><text x="12.8343%" y="255.50"></text></g><g><title>httploadcli`tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (1 samples, 0.22%)</title><rect x="12.8090%" y="261" width="0.2247%" height="15" fill="rgb(239,60,40)" fg:x="57" fg:w="1"/><text x="13.0590%" y="271.50"></text></g><g><title>httploadcli`tokio::runtime::io::scheduled_io::ScheduledIo::wake (5 samples, 1.12%)</title><rect x="13.4831%" y="229" width="1.1236%" height="15" fill="rgb(206,27,48)" fg:x="60" fg:w="5"/><text x="13.7331%" y="239.50"></text></g><g><title>httploadcli`tokio::runtime::task::waker::wake_by_val (2 samples, 0.45%)</title><rect x="14.1573%" y="213" width="0.4494%" height="15" fill="rgb(225,35,8)" fg:x="63" fg:w="2"/><text x="14.4073%" y="223.50"></text></g><g><title>httploadcli`tokio::runtime::task::state::State::transition_to_notified_by_val (2 samples, 0.45%)</title><rect x="14.1573%" y="197" width="0.4494%" height="15" fill="rgb(250,213,24)" fg:x="63" fg:w="2"/><text x="14.4073%" y="207.50"></text></g><g><title>httploadcli`tokio::runtime::time::Driver::park_internal (30 samples, 6.74%)</title><rect x="13.0337%" y="261" width="6.7416%" height="15" fill="rgb(247,123,22)" fg:x="58" fg:w="30"/><text x="13.2837%" y="271.50">httploadc..</text></g><g><title>httploadcli`tokio::runtime::io::Driver::turn (30 samples, 6.74%)</title><rect x="13.0337%" y="245" width="6.7416%" height="15" fill="rgb(231,138,38)" fg:x="58" fg:w="30"/><text x="13.2837%" y="255.50">httploadc..</text></g><g><title>libsystem_kernel.dylib`kevent (23 samples, 5.17%)</title><rect x="14.6067%" y="229" width="5.1685%" height="15" fill="rgb(231,145,46)" fg:x="65" fg:w="23"/><text x="14.8567%" y="239.50">libsys..</text></g><g><title>httploadcli`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.45%)</title><rect x="19.7753%" y="261" width="0.4494%" height="15" fill="rgb(251,118,11)" fg:x="88" fg:w="2"/><text x="20.0253%" y="271.50"></text></g><g><title>httploadcli`tokio::runtime::time::wheel::Wheel::poll (2 samples, 0.45%)</title><rect x="19.7753%" y="245" width="0.4494%" height="15" fill="rgb(217,147,25)" fg:x="88" fg:w="2"/><text x="20.0253%" y="255.50"></text></g><g><title>httploadcli`tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.22%)</title><rect x="20.0000%" y="229" width="0.2247%" height="15" fill="rgb(247,81,37)" fg:x="89" fg:w="1"/><text x="20.2500%" y="239.50"></text></g><g><title>httploadcli`tokio::runtime::time::wheel::level::Level::next_expiration (1 samples, 0.22%)</title><rect x="20.0000%" y="213" width="0.2247%" height="15" fill="rgb(209,12,38)" fg:x="89" fg:w="1"/><text x="20.2500%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.22%)</title><rect x="20.2247%" y="261" width="0.2247%" height="15" fill="rgb(227,1,9)" fg:x="90" fg:w="1"/><text x="20.4747%" y="271.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::park::Parker::park (66 samples, 14.83%)</title><rect x="6.0674%" y="277" width="14.8315%" height="15" fill="rgb(248,47,43)" fg:x="27" fg:w="66"/><text x="6.3174%" y="287.50">httploadcli`tokio::runt..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.45%)</title><rect x="20.4494%" y="261" width="0.4494%" height="15" fill="rgb(221,10,30)" fg:x="91" fg:w="2"/><text x="20.6994%" y="271.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.22%)</title><rect x="20.8989%" y="277" width="0.2247%" height="15" fill="rgb(210,229,1)" fg:x="93" fg:w="1"/><text x="21.1489%" y="287.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (72 samples, 16.18%)</title><rect x="5.6180%" y="293" width="16.1798%" height="15" fill="rgb(222,148,37)" fg:x="25" fg:w="72"/><text x="5.8680%" y="303.50">httploadcli`tokio::runtim..</text></g><g><title>httploadcli`tokio::runtime::time::Driver::park_internal (3 samples, 0.67%)</title><rect x="21.1236%" y="277" width="0.6742%" height="15" fill="rgb(234,67,33)" fg:x="94" fg:w="3"/><text x="21.3736%" y="287.50"></text></g><g><title>httploadcli`tokio::runtime::io::Driver::turn (3 samples, 0.67%)</title><rect x="21.1236%" y="261" width="0.6742%" height="15" fill="rgb(247,98,35)" fg:x="94" fg:w="3"/><text x="21.3736%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`kevent (3 samples, 0.67%)</title><rect x="21.1236%" y="245" width="0.6742%" height="15" fill="rgb(247,138,52)" fg:x="94" fg:w="3"/><text x="21.3736%" y="255.50"></text></g><g><title>httploadcli`parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.22%)</title><rect x="22.4719%" y="261" width="0.2247%" height="15" fill="rgb(213,79,30)" fg:x="100" fg:w="1"/><text x="22.7219%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (5 samples, 1.12%)</title><rect x="22.6966%" y="261" width="1.1236%" height="15" fill="rgb(246,177,23)" fg:x="101" fg:w="5"/><text x="22.9466%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (1 samples, 0.22%)</title><rect x="23.8202%" y="261" width="0.2247%" height="15" fill="rgb(230,62,27)" fg:x="106" fg:w="1"/><text x="24.0702%" y="271.50"></text></g><g><title>httploadcli`parking_lot::condvar::Condvar::notify_one_slow (8 samples, 1.80%)</title><rect x="22.4719%" y="277" width="1.7978%" height="15" fill="rgb(216,154,8)" fg:x="100" fg:w="8"/><text x="22.7219%" y="287.50">h..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.22%)</title><rect x="24.0449%" y="261" width="0.2247%" height="15" fill="rgb(244,35,45)" fg:x="107" fg:w="1"/><text x="24.2949%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.22%)</title><rect x="24.0449%" y="245" width="0.2247%" height="15" fill="rgb(251,115,12)" fg:x="107" fg:w="1"/><text x="24.2949%" y="255.50"></text></g><g><title>httploadcli`&lt;hyper::client::client::Client&lt;hyper::client::connect::http::HttpConnector&gt; as httploader::StatusOnlyHttpClient&gt;::get::_{{closure}} (1 samples, 0.22%)</title><rect x="24.9438%" y="245" width="0.2247%" height="15" fill="rgb(240,54,50)" fg:x="111" fg:w="1"/><text x="25.1938%" y="255.50"></text></g><g><title>httploadcli`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="25.8427%" y="213" width="0.2247%" height="15" fill="rgb(233,84,52)" fg:x="115" fg:w="1"/><text x="26.0927%" y="223.50"></text></g><g><title>httploadcli`&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.22%)</title><rect x="26.2921%" y="197" width="0.2247%" height="15" fill="rgb(207,117,47)" fg:x="117" fg:w="1"/><text x="26.5421%" y="207.50"></text></g><g><title>httploadcli`tokio::runtime::task::waker::clone_waker (1 samples, 0.22%)</title><rect x="28.7640%" y="117" width="0.2247%" height="15" fill="rgb(249,43,39)" fg:x="128" fg:w="1"/><text x="29.0140%" y="127.50"></text></g><g><title>httploadcli`tokio::sync::oneshot::State::is_closed (1 samples, 0.22%)</title><rect x="28.9888%" y="117" width="0.2247%" height="15" fill="rgb(209,38,44)" fg:x="129" fg:w="1"/><text x="29.2388%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="29.2135%" y="117" width="0.2247%" height="15" fill="rgb(236,212,23)" fg:x="130" fg:w="1"/><text x="29.4635%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.45%)</title><rect x="29.4382%" y="117" width="0.4494%" height="15" fill="rgb(242,79,21)" fg:x="131" fg:w="2"/><text x="29.6882%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.22%)</title><rect x="29.8876%" y="117" width="0.2247%" height="15" fill="rgb(211,96,35)" fg:x="133" fg:w="1"/><text x="30.1376%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.22%)</title><rect x="29.8876%" y="101" width="0.2247%" height="15" fill="rgb(253,215,40)" fg:x="133" fg:w="1"/><text x="30.1376%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.22%)</title><rect x="29.8876%" y="85" width="0.2247%" height="15" fill="rgb(211,81,21)" fg:x="133" fg:w="1"/><text x="30.1376%" y="95.50"></text></g><g><title>httploadcli`&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 2.02%)</title><rect x="28.5393%" y="133" width="2.0225%" height="15" fill="rgb(208,190,38)" fg:x="127" fg:w="9"/><text x="28.7893%" y="143.50">h..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.45%)</title><rect x="30.1124%" y="117" width="0.4494%" height="15" fill="rgb(235,213,38)" fg:x="134" fg:w="2"/><text x="30.3624%" y="127.50"></text></g><g><title>httploadcli`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (10 samples, 2.25%)</title><rect x="28.5393%" y="149" width="2.2472%" height="15" fill="rgb(237,122,38)" fg:x="127" fg:w="10"/><text x="28.7893%" y="159.50">h..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="30.5618%" y="133" width="0.2247%" height="15" fill="rgb(244,218,35)" fg:x="136" fg:w="1"/><text x="30.8118%" y="143.50"></text></g><g><title>httploadcli`&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (12 samples, 2.70%)</title><rect x="28.3146%" y="181" width="2.6966%" height="15" fill="rgb(240,68,47)" fg:x="126" fg:w="12"/><text x="28.5646%" y="191.50">ht..</text></g><g><title>httploadcli`&lt;futures_util::future::future::flatten::Flatten&lt;Fut,&lt;Fut as core::future::future::Future&gt;::Output&gt; as core::future::future::Future&gt;::poll (11 samples, 2.47%)</title><rect x="28.5393%" y="165" width="2.4719%" height="15" fill="rgb(210,16,53)" fg:x="127" fg:w="11"/><text x="28.7893%" y="175.50">ht..</text></g><g><title>httploadcli`&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.22%)</title><rect x="30.7865%" y="149" width="0.2247%" height="15" fill="rgb(235,124,12)" fg:x="137" fg:w="1"/><text x="31.0365%" y="159.50"></text></g><g><title>httploadcli`&lt;http::uri::authority::Authority as core::cmp::PartialEq&gt;::eq (1 samples, 0.22%)</title><rect x="31.0112%" y="149" width="0.2247%" height="15" fill="rgb(224,169,11)" fg:x="138" fg:w="1"/><text x="31.2612%" y="159.50"></text></g><g><title>httploadcli`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.45%)</title><rect x="31.0112%" y="181" width="0.4494%" height="15" fill="rgb(250,166,2)" fg:x="138" fg:w="2"/><text x="31.2612%" y="191.50"></text></g><g><title>httploadcli`&lt;hyper::client::pool::Checkout&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.45%)</title><rect x="31.0112%" y="165" width="0.4494%" height="15" fill="rgb(242,216,29)" fg:x="138" fg:w="2"/><text x="31.2612%" y="175.50"></text></g><g><title>httploadcli`hyper::client::pool::Expiration::expires (1 samples, 0.22%)</title><rect x="31.2360%" y="149" width="0.2247%" height="15" fill="rgb(230,116,27)" fg:x="139" fg:w="1"/><text x="31.4860%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.22%)</title><rect x="31.2360%" y="133" width="0.2247%" height="15" fill="rgb(228,99,48)" fg:x="139" fg:w="1"/><text x="31.4860%" y="143.50"></text></g><g><title>httploadcli`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.22%)</title><rect x="31.4607%" y="149" width="0.2247%" height="15" fill="rgb(253,11,6)" fg:x="140" fg:w="1"/><text x="31.7107%" y="159.50"></text></g><g><title>httploadcli`&lt;hyper::client::connect::ExtraEnvelope&lt;T&gt; as hyper::client::connect::ExtraInner&gt;::set (4 samples, 0.90%)</title><rect x="31.4607%" y="181" width="0.8989%" height="15" fill="rgb(247,143,39)" fg:x="140" fg:w="4"/><text x="31.7107%" y="191.50"></text></g><g><title>httploadcli`http::extensions::Extensions::insert (4 samples, 0.90%)</title><rect x="31.4607%" y="165" width="0.8989%" height="15" fill="rgb(236,97,10)" fg:x="140" fg:w="4"/><text x="31.7107%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.67%)</title><rect x="31.6854%" y="149" width="0.6742%" height="15" fill="rgb(233,208,19)" fg:x="141" fg:w="3"/><text x="31.9354%" y="159.50"></text></g><g><title>httploadcli`bytes::bytes::shared_clone (3 samples, 0.67%)</title><rect x="32.3596%" y="181" width="0.6742%" height="15" fill="rgb(216,164,2)" fg:x="144" fg:w="3"/><text x="32.6096%" y="191.50"></text></g><g><title>httploadcli`bytes::bytes::shared_drop (1 samples, 0.22%)</title><rect x="33.0337%" y="181" width="0.2247%" height="15" fill="rgb(220,129,5)" fg:x="147" fg:w="1"/><text x="33.2837%" y="191.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place$LT$futures_util..future..either..Either$LT$futures_util..future..either..Either$LT$futures_util..future..future..Then$LT$tokio..sync..oneshot..Receiver$LT$core..result..Result$LT$http..response..Response$LT$hyper..body..body..Body$GT$$C$$LP$hyper..error..Error$C$core..option..Option$LT$http..request..Request$LT$hyper..body..body..Body$GT$$GT$$RP$$GT$$GT$$C$futures_util..future..ready..Ready$LT$core..result..Result$LT$http..response..Response$LT$hyper..body..body..Body$GT$$C$$LP$hyper..error..Error$C$core..option..Option$LT$http..request..Request$LT$hyper..body..body..Body$GT$$GT$$RP$$GT$$GT$$C$hyper..client..conn..SendRequest$LT$hyper..body..body..Body$GT$..send_request_retryable..$u7b$$u7b$closure$u7d$$u7d$$GT$$C$futures_util..future..ready..Ready$LT$core..result..Result$LT$http..response..Response$LT$hyper..body..body..Body$GT$$C$$LP$hyper..error..Error$C$core..option..Option$LT$http..request..Request$LT$hyper..body..body..Body$GT$$GT$$RP$$GT$$GT$$GT$$C$futures_util..future..either.� (1 samples, 0.22%)</title><rect x="33.2584%" y="181" width="0.2247%" height="15" fill="rgb(242,17,10)" fg:x="148" fg:w="1"/><text x="33.5084%" y="191.50"></text></g><g><title>httploadcli`bytes::bytes::promotable_even_drop (1 samples, 0.22%)</title><rect x="33.4831%" y="165" width="0.2247%" height="15" fill="rgb(242,107,0)" fg:x="149" fg:w="1"/><text x="33.7331%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.22%)</title><rect x="33.4831%" y="149" width="0.2247%" height="15" fill="rgb(251,28,31)" fg:x="149" fg:w="1"/><text x="33.7331%" y="159.50"></text></g><g><title>httploadcli`bytes::bytes::shared_drop (1 samples, 0.22%)</title><rect x="33.7079%" y="165" width="0.2247%" height="15" fill="rgb(233,223,10)" fg:x="150" fg:w="1"/><text x="33.9579%" y="175.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place$LT$hyper..common..lazy..Lazy$LT$hyper..client..client..Client$LT$hyper..client..connect..http..HttpConnector$GT$..connect_to..$u7b$$u7b$closure$u7d$$u7d$$C$futures_util..future..either..Either$LT$futures_util..future..try_future..AndThen$LT$futures_util..future..try_future..MapErr$LT$hyper..service..oneshot..Oneshot$LT$hyper..client..connect..http..HttpConnector$C$http..uri..Uri$GT$$C$hyper..error..Error..new_connect$LT$hyper..client..connect..http..ConnectError$GT$$GT$$C$futures_util..future..either..Either$LT$core..pin..Pin$LT$alloc..boxed..Box$LT$hyper..client..client..Client$LT$hyper..client..connect..http..HttpConnector$GT$..connect_to..$u7b$$u7b$closure$u7d$$u7d$..$u7b$$u7b$closure$u7d$$u7d$..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$$C$futures_util..future..ready..Ready$LT$core..result..Result$LT$hyper..client..pool..Pooled$LT$hyper..client..client..PoolClient$LT$hyper..body..body..Body$GT$$GT$$C$hyper..error..Error$GT$$GT$$GT$$C$hyper..client..client..Client$LT$hyper..client..connect� (3 samples, 0.67%)</title><rect x="33.4831%" y="181" width="0.6742%" height="15" fill="rgb(215,21,27)" fg:x="149" fg:w="3"/><text x="33.7331%" y="191.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;http::uri::Uri&gt; (1 samples, 0.22%)</title><rect x="33.9326%" y="165" width="0.2247%" height="15" fill="rgb(232,23,21)" fg:x="151" fg:w="1"/><text x="34.1826%" y="175.50"></text></g><g><title>httploadcli`bytes::bytes::shared_drop (1 samples, 0.22%)</title><rect x="33.9326%" y="149" width="0.2247%" height="15" fill="rgb(244,5,23)" fg:x="151" fg:w="1"/><text x="34.1826%" y="159.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;http::uri::Uri&gt; (1 samples, 0.22%)</title><rect x="34.1573%" y="181" width="0.2247%" height="15" fill="rgb(226,81,46)" fg:x="152" fg:w="1"/><text x="34.4073%" y="191.50"></text></g><g><title>httploadcli`bytes::bytes::shared_drop (1 samples, 0.22%)</title><rect x="34.1573%" y="165" width="0.2247%" height="15" fill="rgb(247,70,30)" fg:x="152" fg:w="1"/><text x="34.4073%" y="175.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::client::client::Client&lt;hyper::client::connect::http::HttpConnector&gt;&gt; (1 samples, 0.22%)</title><rect x="34.3820%" y="181" width="0.2247%" height="15" fill="rgb(212,68,19)" fg:x="153" fg:w="1"/><text x="34.6320%" y="191.50"></text></g><g><title>httploadcli`&lt;hyper::client::client::PoolClient&lt;B&gt; as hyper::client::pool::Poolable&gt;::is_open (1 samples, 0.22%)</title><rect x="35.0562%" y="149" width="0.2247%" height="15" fill="rgb(240,187,13)" fg:x="156" fg:w="1"/><text x="35.3062%" y="159.50"></text></g><g><title>httploadcli`hyper::client::connect::PoisonPill::poisoned (1 samples, 0.22%)</title><rect x="35.0562%" y="133" width="0.2247%" height="15" fill="rgb(223,113,26)" fg:x="156" fg:w="1"/><text x="35.3062%" y="143.50"></text></g><g><title>httploadcli`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.22%)</title><rect x="35.2809%" y="149" width="0.2247%" height="15" fill="rgb(206,192,2)" fg:x="157" fg:w="1"/><text x="35.5309%" y="159.50"></text></g><g><title>httploadcli`bytes::bytes::shared_clone (1 samples, 0.22%)</title><rect x="35.5056%" y="149" width="0.2247%" height="15" fill="rgb(241,108,4)" fg:x="158" fg:w="1"/><text x="35.7556%" y="159.50"></text></g><g><title>httploadcli`&lt;hyper::client::pool::Pooled&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 2.02%)</title><rect x="34.8315%" y="165" width="2.0225%" height="15" fill="rgb(247,173,49)" fg:x="155" fg:w="9"/><text x="35.0815%" y="175.50">h..</text></g><g><title>httploadcli`hyper::client::pool::PoolInner&lt;T&gt;::put (5 samples, 1.12%)</title><rect x="35.7303%" y="149" width="1.1236%" height="15" fill="rgb(224,114,35)" fg:x="159" fg:w="5"/><text x="35.9803%" y="159.50"></text></g><g><title>httploadcli`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.45%)</title><rect x="36.4045%" y="133" width="0.4494%" height="15" fill="rgb(245,159,27)" fg:x="162" fg:w="2"/><text x="36.6545%" y="143.50"></text></g><g><title>httploadcli`alloc::raw_vec::finish_grow (2 samples, 0.45%)</title><rect x="36.4045%" y="117" width="0.4494%" height="15" fill="rgb(245,172,44)" fg:x="162" fg:w="2"/><text x="36.6545%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.45%)</title><rect x="36.4045%" y="101" width="0.4494%" height="15" fill="rgb(236,23,11)" fg:x="162" fg:w="2"/><text x="36.6545%" y="111.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::client::pool::Pooled&lt;hyper::client::client::PoolClient&lt;hyper::body::body::Body&gt;&gt;&gt; (11 samples, 2.47%)</title><rect x="34.6067%" y="181" width="2.4719%" height="15" fill="rgb(205,117,38)" fg:x="154" fg:w="11"/><text x="34.8567%" y="191.50">ht..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.22%)</title><rect x="36.8539%" y="165" width="0.2247%" height="15" fill="rgb(237,72,25)" fg:x="164" fg:w="1"/><text x="37.1039%" y="175.50"></text></g><g><title>httploadcli`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.22%)</title><rect x="37.5281%" y="149" width="0.2247%" height="15" fill="rgb(244,70,9)" fg:x="167" fg:w="1"/><text x="37.7781%" y="159.50"></text></g><g><title>httploadcli`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.45%)</title><rect x="37.7528%" y="133" width="0.4494%" height="15" fill="rgb(217,125,39)" fg:x="168" fg:w="2"/><text x="38.0028%" y="143.50"></text></g><g><title>httploadcli`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.45%)</title><rect x="37.7528%" y="117" width="0.4494%" height="15" fill="rgb(235,36,10)" fg:x="168" fg:w="2"/><text x="38.0028%" y="127.50"></text></g><g><title>httploadcli`alloc::raw_vec::finish_grow (2 samples, 0.45%)</title><rect x="37.7528%" y="101" width="0.4494%" height="15" fill="rgb(251,123,47)" fg:x="168" fg:w="2"/><text x="38.0028%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.22%)</title><rect x="37.9775%" y="85" width="0.2247%" height="15" fill="rgb(221,13,13)" fg:x="169" fg:w="1"/><text x="38.2275%" y="95.50"></text></g><g><title>httploadcli`alloc::fmt::format::format_inner (6 samples, 1.35%)</title><rect x="37.0787%" y="165" width="1.3483%" height="15" fill="rgb(238,131,9)" fg:x="165" fg:w="6"/><text x="37.3287%" y="175.50"></text></g><g><title>httploadcli`core::fmt::write (3 samples, 0.67%)</title><rect x="37.7528%" y="149" width="0.6742%" height="15" fill="rgb(211,50,8)" fg:x="168" fg:w="3"/><text x="38.0028%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="38.2022%" y="133" width="0.2247%" height="15" fill="rgb(245,182,24)" fg:x="170" fg:w="1"/><text x="38.4522%" y="143.50"></text></g><g><title>httploadcli`http::uri::Uri::port (2 samples, 0.45%)</title><rect x="38.4270%" y="165" width="0.4494%" height="15" fill="rgb(242,14,37)" fg:x="171" fg:w="2"/><text x="38.6770%" y="175.50"></text></g><g><title>httploadcli`core::slice::memchr::memrchr (1 samples, 0.22%)</title><rect x="39.1011%" y="149" width="0.2247%" height="15" fill="rgb(246,228,12)" fg:x="174" fg:w="1"/><text x="39.3511%" y="159.50"></text></g><g><title>httploadcli`http::uri::authority::host (3 samples, 0.67%)</title><rect x="38.8764%" y="165" width="0.6742%" height="15" fill="rgb(213,55,15)" fg:x="173" fg:w="3"/><text x="39.1264%" y="175.50"></text></g><g><title>httploadcli`core::str::iter::SplitInternal&lt;P&gt;::next_back (1 samples, 0.22%)</title><rect x="39.3258%" y="149" width="0.2247%" height="15" fill="rgb(209,9,3)" fg:x="175" fg:w="1"/><text x="39.5758%" y="159.50"></text></g><g><title>httploadcli`core::slice::memchr::memrchr (1 samples, 0.22%)</title><rect x="39.3258%" y="133" width="0.2247%" height="15" fill="rgb(230,59,30)" fg:x="175" fg:w="1"/><text x="39.5758%" y="143.50"></text></g><g><title>httploadcli`http::header::map::Entry&lt;T&gt;::or_insert_with (12 samples, 2.70%)</title><rect x="37.0787%" y="181" width="2.6966%" height="15" fill="rgb(209,121,21)" fg:x="165" fg:w="12"/><text x="37.3287%" y="191.50">ht..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.22%)</title><rect x="39.5506%" y="165" width="0.2247%" height="15" fill="rgb(220,109,13)" fg:x="176" fg:w="1"/><text x="39.8006%" y="175.50"></text></g><g><title>httploadcli`http::header::map::HeaderMap&lt;T&gt;::entry (3 samples, 0.67%)</title><rect x="39.7753%" y="181" width="0.6742%" height="15" fill="rgb(232,18,1)" fg:x="177" fg:w="3"/><text x="40.0253%" y="191.50"></text></g><g><title>httploadcli`http::header::map::HeaderMap&lt;T&gt;::reserve_one (3 samples, 0.67%)</title><rect x="39.7753%" y="165" width="0.6742%" height="15" fill="rgb(215,41,42)" fg:x="177" fg:w="3"/><text x="40.0253%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.67%)</title><rect x="39.7753%" y="149" width="0.6742%" height="15" fill="rgb(224,123,36)" fg:x="177" fg:w="3"/><text x="40.0253%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.67%)</title><rect x="39.7753%" y="133" width="0.6742%" height="15" fill="rgb(240,125,3)" fg:x="177" fg:w="3"/><text x="40.0253%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.22%)</title><rect x="40.2247%" y="117" width="0.2247%" height="15" fill="rgb(205,98,50)" fg:x="179" fg:w="1"/><text x="40.4747%" y="127.50"></text></g><g><title>httploadcli`http::uri::builder::Builder::build (1 samples, 0.22%)</title><rect x="40.4494%" y="165" width="0.2247%" height="15" fill="rgb(205,185,37)" fg:x="180" fg:w="1"/><text x="40.6994%" y="175.50"></text></g><g><title>httploadcli`http::uri::path::PathAndQuery::from_shared (2 samples, 0.45%)</title><rect x="40.6742%" y="165" width="0.4494%" height="15" fill="rgb(238,207,15)" fg:x="181" fg:w="2"/><text x="40.9242%" y="175.50"></text></g><g><title>httploadcli`hyper::client::client::domain_as_uri (4 samples, 0.90%)</title><rect x="40.4494%" y="181" width="0.8989%" height="15" fill="rgb(213,199,42)" fg:x="180" fg:w="4"/><text x="40.6994%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.22%)</title><rect x="41.1236%" y="165" width="0.2247%" height="15" fill="rgb(235,201,11)" fg:x="183" fg:w="1"/><text x="41.3736%" y="175.50"></text></g><g><title>httploadcli`hyper::client::client::get_non_default_port (2 samples, 0.45%)</title><rect x="41.3483%" y="181" width="0.4494%" height="15" fill="rgb(207,46,11)" fg:x="184" fg:w="2"/><text x="41.5983%" y="191.50"></text></g><g><title>httploadcli`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (1 samples, 0.22%)</title><rect x="41.7978%" y="133" width="0.2247%" height="15" fill="rgb(241,35,35)" fg:x="186" fg:w="1"/><text x="42.0478%" y="143.50"></text></g><g><title>httploadcli`tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (2 samples, 0.45%)</title><rect x="41.7978%" y="149" width="0.4494%" height="15" fill="rgb(243,32,47)" fg:x="186" fg:w="2"/><text x="42.0478%" y="159.50"></text></g><g><title>httploadcli`tokio::sync::task::atomic_waker::AtomicWaker::wake (1 samples, 0.22%)</title><rect x="42.0225%" y="133" width="0.2247%" height="15" fill="rgb(247,202,23)" fg:x="187" fg:w="1"/><text x="42.2725%" y="143.50"></text></g><g><title>httploadcli`tokio::sync::oneshot::State::as_usize (1 samples, 0.22%)</title><rect x="42.2472%" y="149" width="0.2247%" height="15" fill="rgb(219,102,11)" fg:x="188" fg:w="1"/><text x="42.4972%" y="159.50"></text></g><g><title>httploadcli`hyper::client::conn::SendRequest&lt;B&gt;::send_request_retryable (4 samples, 0.90%)</title><rect x="41.7978%" y="181" width="0.8989%" height="15" fill="rgb(243,110,44)" fg:x="186" fg:w="4"/><text x="42.0478%" y="191.50"></text></g><g><title>httploadcli`hyper::client::dispatch::Sender&lt;T,U&gt;::try_send (4 samples, 0.90%)</title><rect x="41.7978%" y="165" width="0.8989%" height="15" fill="rgb(222,74,54)" fg:x="186" fg:w="4"/><text x="42.0478%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="42.4719%" y="149" width="0.2247%" height="15" fill="rgb(216,99,12)" fg:x="189" fg:w="1"/><text x="42.7219%" y="159.50"></text></g><g><title>httploadcli`hyper::client::dispatch::Sender&lt;T,U&gt;::try_send (1 samples, 0.22%)</title><rect x="42.6966%" y="181" width="0.2247%" height="15" fill="rgb(226,22,26)" fg:x="190" fg:w="1"/><text x="42.9466%" y="191.50"></text></g><g><title>httploadcli`hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::_{{closure}} (74 samples, 16.63%)</title><rect x="26.5169%" y="197" width="16.6292%" height="15" fill="rgb(217,163,10)" fg:x="118" fg:w="74"/><text x="26.7669%" y="207.50">httploadcli`hyper::client:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="42.9213%" y="181" width="0.2247%" height="15" fill="rgb(213,25,53)" fg:x="191" fg:w="1"/><text x="43.1713%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.45%)</title><rect x="43.1461%" y="197" width="0.4494%" height="15" fill="rgb(252,105,26)" fg:x="192" fg:w="2"/><text x="43.3961%" y="207.50"></text></g><g><title>httploadcli`&lt;hyper::client::client::ResponseFuture as core::future::future::Future&gt;::poll (79 samples, 17.75%)</title><rect x="26.0674%" y="213" width="17.7528%" height="15" fill="rgb(220,39,43)" fg:x="116" fg:w="79"/><text x="26.3174%" y="223.50">httploadcli`&lt;hyper::client::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="43.5955%" y="197" width="0.2247%" height="15" fill="rgb(229,68,48)" fg:x="194" fg:w="1"/><text x="43.8455%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.22%)</title><rect x="43.8202%" y="181" width="0.2247%" height="15" fill="rgb(252,8,32)" fg:x="195" fg:w="1"/><text x="44.0702%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.22%)</title><rect x="44.2697%" y="165" width="0.2247%" height="15" fill="rgb(223,20,43)" fg:x="197" fg:w="1"/><text x="44.5197%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.22%)</title><rect x="44.4944%" y="165" width="0.2247%" height="15" fill="rgb(229,81,49)" fg:x="198" fg:w="1"/><text x="44.7444%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.22%)</title><rect x="44.4944%" y="149" width="0.2247%" height="15" fill="rgb(236,28,36)" fg:x="198" fg:w="1"/><text x="44.7444%" y="159.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (5 samples, 1.12%)</title><rect x="43.8202%" y="197" width="1.1236%" height="15" fill="rgb(249,185,26)" fg:x="195" fg:w="5"/><text x="44.0702%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.90%)</title><rect x="44.0449%" y="181" width="0.8989%" height="15" fill="rgb(249,174,33)" fg:x="196" fg:w="4"/><text x="44.2949%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="44.7191%" y="165" width="0.2247%" height="15" fill="rgb(233,201,37)" fg:x="199" fg:w="1"/><text x="44.9691%" y="175.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;http::response::Response&lt;hyper::body::body::Body&gt;&gt; (6 samples, 1.35%)</title><rect x="43.8202%" y="213" width="1.3483%" height="15" fill="rgb(221,78,26)" fg:x="195" fg:w="6"/><text x="44.0702%" y="223.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::client::connect::http::HttpInfo&gt; (1 samples, 0.22%)</title><rect x="44.9438%" y="197" width="0.2247%" height="15" fill="rgb(250,127,30)" fg:x="200" fg:w="1"/><text x="45.1938%" y="207.50"></text></g><g><title>httploadcli`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.45%)</title><rect x="45.6180%" y="181" width="0.4494%" height="15" fill="rgb(230,49,44)" fg:x="203" fg:w="2"/><text x="45.8680%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.22%)</title><rect x="45.8427%" y="165" width="0.2247%" height="15" fill="rgb(229,67,23)" fg:x="204" fg:w="1"/><text x="46.0927%" y="175.50"></text></g><g><title>httploadcli`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (1 samples, 0.22%)</title><rect x="46.0674%" y="181" width="0.2247%" height="15" fill="rgb(249,83,47)" fg:x="205" fg:w="1"/><text x="46.3174%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.45%)</title><rect x="46.2921%" y="181" width="0.4494%" height="15" fill="rgb(215,43,3)" fg:x="206" fg:w="2"/><text x="46.5421%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="46.5169%" y="165" width="0.2247%" height="15" fill="rgb(238,154,13)" fg:x="207" fg:w="1"/><text x="46.7669%" y="175.50"></text></g><g><title>httploadcli`&lt;futures_channel::mpsc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.35%)</title><rect x="45.6180%" y="197" width="1.3483%" height="15" fill="rgb(219,56,2)" fg:x="203" fg:w="6"/><text x="45.8680%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.22%)</title><rect x="46.7416%" y="181" width="0.2247%" height="15" fill="rgb(233,0,4)" fg:x="208" fg:w="1"/><text x="46.9916%" y="191.50"></text></g><g><title>httploadcli`&lt;hyper::common::watch::Sender as core::ops::drop::Drop&gt;::drop (1 samples, 0.22%)</title><rect x="46.9663%" y="197" width="0.2247%" height="15" fill="rgb(235,30,7)" fg:x="209" fg:w="1"/><text x="47.2163%" y="207.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (10 samples, 2.25%)</title><rect x="45.1685%" y="213" width="2.2472%" height="15" fill="rgb(250,79,13)" fg:x="201" fg:w="10"/><text x="45.4185%" y="223.50">h..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.22%)</title><rect x="47.1910%" y="197" width="0.2247%" height="15" fill="rgb(211,146,34)" fg:x="210" fg:w="1"/><text x="47.4410%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="47.1910%" y="181" width="0.2247%" height="15" fill="rgb(228,22,38)" fg:x="210" fg:w="1"/><text x="47.4410%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.22%)</title><rect x="47.4157%" y="213" width="0.2247%" height="15" fill="rgb(235,168,5)" fg:x="211" fg:w="1"/><text x="47.6657%" y="223.50"></text></g><g><title>httploadcli`&lt;hyper::client::client::Client&lt;hyper::client::connect::http::HttpConnector&gt; as httploader::StatusOnlyHttpClient&gt;::get::_{{closure}} (102 samples, 22.92%)</title><rect x="25.3933%" y="229" width="22.9213%" height="15" fill="rgb(221,155,16)" fg:x="113" fg:w="102"/><text x="25.6433%" y="239.50">httploadcli`&lt;hyper::client::client::..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.67%)</title><rect x="47.6404%" y="213" width="0.6742%" height="15" fill="rgb(215,215,53)" fg:x="212" fg:w="3"/><text x="47.8904%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.67%)</title><rect x="47.6404%" y="197" width="0.6742%" height="15" fill="rgb(223,4,10)" fg:x="212" fg:w="3"/><text x="47.8904%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.22%)</title><rect x="48.0899%" y="181" width="0.2247%" height="15" fill="rgb(234,103,6)" fg:x="214" fg:w="1"/><text x="48.3399%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.22%)</title><rect x="48.0899%" y="165" width="0.2247%" height="15" fill="rgb(227,97,0)" fg:x="214" fg:w="1"/><text x="48.3399%" y="175.50"></text></g><g><title>httploadcli`&lt;hyper::client::client::Client&lt;hyper::client::connect::http::HttpConnector&gt; as httploader::StatusOnlyHttpClient&gt;::get (1 samples, 0.22%)</title><rect x="48.3146%" y="229" width="0.2247%" height="15" fill="rgb(234,150,53)" fg:x="215" fg:w="1"/><text x="48.5646%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.22%)</title><rect x="48.3146%" y="213" width="0.2247%" height="15" fill="rgb(228,201,54)" fg:x="215" fg:w="1"/><text x="48.5646%" y="223.50"></text></g><g><title>httploadcli`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.22%)</title><rect x="48.7640%" y="213" width="0.2247%" height="15" fill="rgb(222,22,37)" fg:x="217" fg:w="1"/><text x="49.0140%" y="223.50"></text></g><g><title>httploadcli`alloc::fmt::format::format_inner (3 samples, 0.67%)</title><rect x="48.5393%" y="229" width="0.6742%" height="15" fill="rgb(237,53,32)" fg:x="216" fg:w="3"/><text x="48.7893%" y="239.50"></text></g><g><title>httploadcli`core::fmt::write (1 samples, 0.22%)</title><rect x="48.9888%" y="213" width="0.2247%" height="15" fill="rgb(233,25,53)" fg:x="218" fg:w="1"/><text x="49.2388%" y="223.50"></text></g><g><title>httploadcli`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.22%)</title><rect x="48.9888%" y="197" width="0.2247%" height="15" fill="rgb(210,40,34)" fg:x="218" fg:w="1"/><text x="49.2388%" y="207.50"></text></g><g><title>httploadcli`core::fmt::Formatter::pad_integral (1 samples, 0.22%)</title><rect x="48.9888%" y="181" width="0.2247%" height="15" fill="rgb(241,220,44)" fg:x="218" fg:w="1"/><text x="49.2388%" y="191.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::client::client::Client&lt;hyper::client::connect::http::HttpConnector&gt;::retryably_send_request::{{closure}}&gt; (1 samples, 0.22%)</title><rect x="49.2135%" y="229" width="0.2247%" height="15" fill="rgb(235,28,35)" fg:x="219" fg:w="1"/><text x="49.4635%" y="239.50"></text></g><g><title>httploadcli`std::time::Instant::duration_since (1 samples, 0.22%)</title><rect x="49.4382%" y="229" width="0.2247%" height="15" fill="rgb(210,56,17)" fg:x="220" fg:w="1"/><text x="49.6882%" y="239.50"></text></g><g><title>httploadcli`tokio::sync::mpsc::list::Tx&lt;T&gt;::push (1 samples, 0.22%)</title><rect x="49.6629%" y="229" width="0.2247%" height="15" fill="rgb(224,130,29)" fg:x="221" fg:w="1"/><text x="49.9129%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.22%)</title><rect x="49.8876%" y="229" width="0.2247%" height="15" fill="rgb(235,212,8)" fg:x="222" fg:w="1"/><text x="50.1376%" y="239.50"></text></g><g><title>httploadcli`httploader::connection_task::_{{closure}} (112 samples, 25.17%)</title><rect x="25.1685%" y="245" width="25.1685%" height="15" fill="rgb(223,33,50)" fg:x="112" fg:w="112"/><text x="25.4185%" y="255.50">httploadcli`httploader::connection_task:..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.22%)</title><rect x="50.1124%" y="229" width="0.2247%" height="15" fill="rgb(219,149,13)" fg:x="223" fg:w="1"/><text x="50.3624%" y="239.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::body::body::Sender&gt; (2 samples, 0.45%)</title><rect x="50.5618%" y="181" width="0.4494%" height="15" fill="rgb(250,156,29)" fg:x="225" fg:w="2"/><text x="50.8118%" y="191.50"></text></g><g><title>httploadcli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (1 samples, 0.22%)</title><rect x="51.0112%" y="181" width="0.2247%" height="15" fill="rgb(216,193,19)" fg:x="227" fg:w="1"/><text x="51.2612%" y="191.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::client::dispatch::Callback&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;hyper::body::body::Body&gt;&gt;&gt; (1 samples, 0.22%)</title><rect x="52.3596%" y="149" width="0.2247%" height="15" fill="rgb(216,135,14)" fg:x="233" fg:w="1"/><text x="52.6096%" y="159.50"></text></g><g><title>httploadcli`&lt;hyper::client::dispatch::Callback&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.45%)</title><rect x="52.5843%" y="133" width="0.4494%" height="15" fill="rgb(241,47,5)" fg:x="234" fg:w="2"/><text x="52.8343%" y="143.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::error::Error&gt; (1 samples, 0.22%)</title><rect x="53.0337%" y="101" width="0.2247%" height="15" fill="rgb(233,42,35)" fg:x="236" fg:w="1"/><text x="53.2837%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.22%)</title><rect x="53.0337%" y="85" width="0.2247%" height="15" fill="rgb(231,13,6)" fg:x="236" fg:w="1"/><text x="53.2837%" y="95.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::client::dispatch::Callback&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;hyper::body::body::Body&gt;&gt;&gt; (2 samples, 0.45%)</title><rect x="53.0337%" y="133" width="0.4494%" height="15" fill="rgb(207,181,40)" fg:x="236" fg:w="2"/><text x="53.2837%" y="143.50"></text></g><g><title>httploadcli`&lt;hyper::client::dispatch::Callback&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.45%)</title><rect x="53.0337%" y="117" width="0.4494%" height="15" fill="rgb(254,173,49)" fg:x="236" fg:w="2"/><text x="53.2837%" y="127.50"></text></g><g><title>httploadcli`hyper::error::Error::with (1 samples, 0.22%)</title><rect x="53.2584%" y="101" width="0.2247%" height="15" fill="rgb(221,1,38)" fg:x="237" fg:w="1"/><text x="53.5084%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.22%)</title><rect x="53.2584%" y="85" width="0.2247%" height="15" fill="rgb(206,124,46)" fg:x="237" fg:w="1"/><text x="53.5084%" y="95.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.22%)</title><rect x="53.4831%" y="133" width="0.2247%" height="15" fill="rgb(249,21,11)" fg:x="238" fg:w="1"/><text x="53.7331%" y="143.50"></text></g><g><title>httploadcli`tokio::runtime::context::with_scheduler (1 samples, 0.22%)</title><rect x="53.7079%" y="101" width="0.2247%" height="15" fill="rgb(222,201,40)" fg:x="239" fg:w="1"/><text x="53.9579%" y="111.50"></text></g><g><title>httploadcli`tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 0.22%)</title><rect x="53.7079%" y="85" width="0.2247%" height="15" fill="rgb(235,61,29)" fg:x="239" fg:w="1"/><text x="53.9579%" y="95.50"></text></g><g><title>httploadcli`hyper::client::dispatch::Callback&lt;T,U&gt;::send (8 samples, 1.80%)</title><rect x="52.5843%" y="149" width="1.7978%" height="15" fill="rgb(219,207,3)" fg:x="234" fg:w="8"/><text x="52.8343%" y="159.50">h..</text></g><g><title>httploadcli`tokio::sync::oneshot::Sender&lt;T&gt;::send (3 samples, 0.67%)</title><rect x="53.7079%" y="133" width="0.6742%" height="15" fill="rgb(222,56,46)" fg:x="239" fg:w="3"/><text x="53.9579%" y="143.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (3 samples, 0.67%)</title><rect x="53.7079%" y="117" width="0.6742%" height="15" fill="rgb(239,76,54)" fg:x="239" fg:w="3"/><text x="53.9579%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.45%)</title><rect x="53.9326%" y="101" width="0.4494%" height="15" fill="rgb(231,124,27)" fg:x="240" fg:w="2"/><text x="54.1826%" y="111.50"></text></g><g><title>httploadcli`&lt;hyper::proto::h1::dispatch::Client&lt;B&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (12 samples, 2.70%)</title><rect x="52.1348%" y="165" width="2.6966%" height="15" fill="rgb(249,195,6)" fg:x="232" fg:w="12"/><text x="52.3848%" y="175.50">ht..</text></g><g><title>httploadcli`hyper::proto::MessageHead&lt;http::status::StatusCode&gt;::into_response (2 samples, 0.45%)</title><rect x="54.3820%" y="149" width="0.4494%" height="15" fill="rgb(237,174,47)" fg:x="242" fg:w="2"/><text x="54.6320%" y="159.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (1 samples, 0.22%)</title><rect x="54.6067%" y="133" width="0.2247%" height="15" fill="rgb(206,201,31)" fg:x="243" fg:w="1"/><text x="54.8567%" y="143.50"></text></g><g><title>httploadcli`core::ptr::drop_in_place&lt;hyper::body::body::Sender&gt; (2 samples, 0.45%)</title><rect x="54.8315%" y="165" width="0.4494%" height="15" fill="rgb(231,57,52)" fg:x="244" fg:w="2"/><text x="55.0815%" y="175.50"></text></g><g><title>httploadcli`futures_channel::mpsc::channel (2 samples, 0.45%)</title><rect x="55.2809%" y="149" width="0.4494%" height="15" fill="rgb(248,177,22)" fg:x="246" fg:w="2"/><text x="55.5309%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.22%)</title><rect x="55.5056%" y="133" width="0.2247%" height="15" fill="rgb(215,211,37)" fg:x="247" fg:w="1"/><text x="55.7556%" y="143.50"></text></g><g><title>httploadcli`hyper::common::watch::channel (1 samples, 0.22%)</title><rect x="55.7303%" y="149" width="0.2247%" height="15" fill="rgb(241,128,51)" fg:x="248" fg:w="1"/><text x="55.9803%" y="159.50"></text></g><g><title>httploadcli`&lt;futures_core::task::__internal::atomic_waker::AtomicWaker as core::default::Default&gt;::default (1 samples, 0.22%)</title><rect x="55.7303%" y="133" width="0.2247%" height="15" fill="rgb(227,165,31)" fg:x="248" fg:w="1"/><text x="55.9803%" y="143.50"></text></g><g><title>httploadcli`hyper::body::body::Body::new_channel (5 samples, 1.12%)</title><rect x="55.2809%" y="165" width="1.1236%" height="15" fill="rgb(228,167,24)" fg:x="246" fg:w="5"/><text x="55.5309%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.45%)</title><rect x="55.9551%" y="149" width="0.4494%" height="15" fill="rgb(228,143,12)" fg:x="249" fg:w="2"/><text x="56.2051%" y="159.50"></text></g><g><title>httploadcli`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (1 samples, 0.22%)</title><rect x="56.6292%" y="133" width="0.2247%" height="15" fill="rgb(249,149,8)" fg:x="252" fg:w="1"/><text x="56.8792%" y="143.50"></text></g><g><title>httploadcli`futures_channel::mpsc::Sender&lt;T&gt;::try_send (4 samples, 0.90%)</title><rect x="56.4045%" y="149" width="0.8989%" height="15" fill="rgb(243,35,44)" fg:x="251" fg:w="4"/><text x="56.6545%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_init (2 samples, 0.45%)</title><rect x="56.8539%" y="133" width="0.4494%" height="15" fill="rgb(246,89,9)" fg:x="253" fg:w="2"/><text x="57.1039%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.22%)</title><rect x="57.3034%" y="149" width="0.2247%" height="15" fill="rgb(233,213,13)" fg:x="255" fg:w="1"/><text x="57.5534%" y="159.50"></text></g><g><title>httploadcli`hyper::body::body::Sender::try_send_data (6 samples, 1.35%)</title><rect x="56.4045%" y="165" width="1.3483%" height="15" fill="rgb(233,141,41)" fg:x="251" fg:w="6"/><text x="56.6545%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.22%)</title><rect x="57.5281%" y="149" width="0.2247%" height="15" fill="rgb(239,167,4)" fg:x="256" fg:w="1"/><text x="57.7781%" y="159.50"></text></g><g><title>httploadcli`tokio::runtime::coop::Budget::decrement (1 samples, 0.22%)</title><rect x="57.7528%" y="149" width="0.2247%" height="15" fill="rgb(209,217,16)" fg:x="257" fg:w="1"/><text x="58.0028%" y="159.50"></text></g><g><title>httploadcli`&lt;tokio::sync::mpsc::unbounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (1 samples, 0.22%)</title><rect x="57.9775%" y="133" width="0.2247%" height="15" fill="rgb(219,88,35)" fg:x="258" fg:w="1"/><text x="58.2275%" y="143.50"></text></g><g><title>httploadcli`hyper::client::dispatch::Receiver&lt;T,U&gt;::poll_recv (6 samples, 1.35%)</title><rect x="57.7528%" y="165" width="1.3483%" height="15" fill="rgb(220,193,23)" fg:x="257" fg:w="6"/><text x="58.0028%" y="175.50"></text></g><g><title>httploadcli`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (5 samples, 1.12%)</title><rect x="57.9775%" y="149" width="1.1236%" height="15" fill="rgb(230,90,52)" fg:x="258" fg:w="5"/><text x="58.2275%" y="159.50"></text></g><g><title>httploadcli`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 0.90%)</title><rect x="58.2022%" y="133" width="0.8989%" height="15" fill="rgb(252,106,19)" fg:x="259" fg:w="4"/><text x="58.4522%" y="143.50"></text></g><g><title>httploadcli`tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.67%)</title><rect x="58.4270%" y="117" width="0.6742%" height="15" fill="rgb(206,74,20)" fg:x="260" fg:w="3"/><text x="58.6770%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="58.8764%" y="101" width="0.2247%" height="15" fill="rgb(230,138,44)" fg:x="262" fg:w="1"/><text x="59.1264%" y="111.50"></text></g><g><title>httploadcli`core::fmt::write (1 samples, 0.22%)</title><rect x="59.1011%" y="117" width="0.2247%" height="15" fill="rgb(235,182,43)" fg:x="263" fg:w="1"/><text x="59.3511%" y="127.50"></text></g><g><title>httploadcli`&lt;http::uri::Uri as core::fmt::Display&gt;::fmt (1 samples, 0.22%)</title><rect x="59.1011%" y="101" width="0.2247%" height="15" fill="rgb(242,16,51)" fg:x="263" fg:w="1"/><text x="59.3511%" y="111.50"></text></g><g><title>httploadcli`core::fmt::Formatter::write_fmt (1 samples, 0.22%)</title><rect x="59.1011%" y="85" width="0.2247%" height="15" fill="rgb(248,9,4)" fg:x="263" fg:w="1"/><text x="59.3511%" y="95.50"></text></g><g><title>httploadcli`core::fmt::write (1 samples, 0.22%)</title><rect x="59.1011%" y="69" width="0.2247%" height="15" fill="rgb(210,31,22)" fg:x="263" fg:w="1"/><text x="59.3511%" y="79.50"></text></g><g><title>httploadcli`&lt;hyper::proto::h1::role::FastWrite as core::fmt::Write&gt;::write_str (1 samples, 0.22%)</title><rect x="59.1011%" y="53" width="0.2247%" height="15" fill="rgb(239,54,39)" fg:x="263" fg:w="1"/><text x="59.3511%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="59.1011%" y="37" width="0.2247%" height="15" fill="rgb(230,99,41)" fg:x="263" fg:w="1"/><text x="59.3511%" y="47.50"></text></g><g><title>httploadcli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (2 samples, 0.45%)</title><rect x="59.1011%" y="165" width="0.4494%" height="15" fill="rgb(253,106,12)" fg:x="263" fg:w="2"/><text x="59.3511%" y="175.50"></text></g><g><title>httploadcli`hyper::proto::h1::role::encode_headers (2 samples, 0.45%)</title><rect x="59.1011%" y="149" width="0.4494%" height="15" fill="rgb(213,46,41)" fg:x="263" fg:w="2"/><text x="59.3511%" y="159.50"></text></g><g><title>httploadcli`&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::encode (2 samples, 0.45%)</title><rect x="59.1011%" y="133" width="0.4494%" height="15" fill="rgb(215,133,35)" fg:x="263" fg:w="2"/><text x="59.3511%" y="143.50"></text></g><g><title>httploadcli`http::header::name::HeaderName::as_str (1 samples, 0.22%)</title><rect x="59.3258%" y="117" width="0.2247%" height="15" fill="rgb(213,28,5)" fg:x="264" fg:w="1"/><text x="59.5758%" y="127.50"></text></g><g><title>httploadcli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (67 samples, 15.06%)</title><rect x="59.5506%" y="165" width="15.0562%" height="15" fill="rgb(215,77,49)" fg:x="265" fg:w="67"/><text x="59.8006%" y="175.50">httploadcli`hyper::prot..</text></g><g><title>httploadcli`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (67 samples, 15.06%)</title><rect x="59.5506%" y="149" width="15.0562%" height="15" fill="rgb(248,100,22)" fg:x="265" fg:w="67"/><text x="59.8006%" y="159.50">httploadcli`hyper::prot..</text></g><g><title>httploadcli`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (63 samples, 14.16%)</title><rect x="60.4494%" y="133" width="14.1573%" height="15" fill="rgb(208,67,9)" fg:x="269" fg:w="63"/><text x="60.6994%" y="143.50">httploadcli`&lt;tokio::n..</text></g><g><title>httploadcli`tokio::runtime::io::registration::Registration::poll_io (63 samples, 14.16%)</title><rect x="60.4494%" y="117" width="14.1573%" height="15" fill="rgb(219,133,21)" fg:x="269" fg:w="63"/><text x="60.6994%" y="127.50">httploadcli`tokio::ru..</text></g><g><title>httploadcli`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (62 samples, 13.93%)</title><rect x="60.6742%" y="101" width="13.9326%" height="15" fill="rgb(246,46,29)" fg:x="270" fg:w="62"/><text x="60.9242%" y="111.50">httploadcli`&lt;&amp;mio::ne..</text></g><g><title>libsystem_kernel.dylib`writev (61 samples, 13.71%)</title><rect x="60.8989%" y="85" width="13.7079%" height="15" fill="rgb(246,185,52)" fg:x="271" fg:w="61"/><text x="61.1489%" y="95.50">libsystem_kernel.dyli..</text></g><g><title>httploadcli`bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.22%)</title><rect x="74.6067%" y="133" width="0.2247%" height="15" fill="rgb(252,136,11)" fg:x="332" fg:w="1"/><text x="74.8567%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.22%)</title><rect x="75.0562%" y="101" width="0.2247%" height="15" fill="rgb(219,138,53)" fg:x="334" fg:w="1"/><text x="75.3062%" y="111.50"></text></g><g><title>httploadcli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (7 samples, 1.57%)</title><rect x="74.6067%" y="149" width="1.5730%" height="15" fill="rgb(211,51,23)" fg:x="332" fg:w="7"/><text x="74.8567%" y="159.50"></text></g><g><title>httploadcli`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (6 samples, 1.35%)</title><rect x="74.8315%" y="133" width="1.3483%" height="15" fill="rgb(247,221,28)" fg:x="333" fg:w="6"/><text x="75.0815%" y="143.50"></text></g><g><title>httploadcli`bytes::bytes_mut::BytesMut::reserve_inner (5 samples, 1.12%)</title><rect x="75.0562%" y="117" width="1.1236%" height="15" fill="rgb(251,222,45)" fg:x="334" fg:w="5"/><text x="75.3062%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.90%)</title><rect x="75.2809%" y="101" width="0.8989%" height="15" fill="rgb(217,162,53)" fg:x="335" fg:w="4"/><text x="75.5309%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.67%)</title><rect x="75.5056%" y="85" width="0.6742%" height="15" fill="rgb(229,93,14)" fg:x="336" fg:w="3"/><text x="75.7556%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.22%)</title><rect x="75.9551%" y="69" width="0.2247%" height="15" fill="rgb(209,67,49)" fg:x="338" fg:w="1"/><text x="76.2051%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.22%)</title><rect x="75.9551%" y="53" width="0.2247%" height="15" fill="rgb(213,87,29)" fg:x="338" fg:w="1"/><text x="76.2051%" y="63.50"></text></g><g><title>httploadcli`hyper::proto::h1::conn::KA::idle (1 samples, 0.22%)</title><rect x="76.1798%" y="149" width="0.2247%" height="15" fill="rgb(205,151,52)" fg:x="339" fg:w="1"/><text x="76.4298%" y="159.50"></text></g><g><title>httploadcli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (10 samples, 2.25%)</title><rect x="74.6067%" y="165" width="2.2472%" height="15" fill="rgb(253,215,39)" fg:x="332" fg:w="10"/><text x="74.8567%" y="175.50">h..</text></g><g><title>httploadcli`hyper::proto::h1::decode::Decoder::decode (2 samples, 0.45%)</title><rect x="76.4045%" y="149" width="0.4494%" height="15" fill="rgb(221,220,41)" fg:x="340" fg:w="2"/><text x="76.6545%" y="159.50"></text></g><g><title>httploadcli`bytes::bytes_mut::BytesMut::freeze (1 samples, 0.22%)</title><rect x="76.6292%" y="133" width="0.2247%" height="15" fill="rgb(218,133,21)" fg:x="341" fg:w="1"/><text x="76.8792%" y="143.50"></text></g><g><title>httploadcli`&lt;hyper::proto::h1::conn::KA as core::ops::bit::BitAndAssign&lt;bool&gt;&gt;::bitand_assign (1 samples, 0.22%)</title><rect x="77.0787%" y="149" width="0.2247%" height="15" fill="rgb(221,193,43)" fg:x="343" fg:w="1"/><text x="77.3287%" y="159.50"></text></g><g><title>libsystem_c.dylib`recv (1 samples, 0.22%)</title><rect x="77.5281%" y="85" width="0.2247%" height="15" fill="rgb(240,128,52)" fg:x="345" fg:w="1"/><text x="77.7781%" y="95.50"></text></g><g><title>httploadcli`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (53 samples, 11.91%)</title><rect x="77.3034%" y="133" width="11.9101%" height="15" fill="rgb(253,114,12)" fg:x="344" fg:w="53"/><text x="77.5534%" y="143.50">httploadcli`hyper:..</text></g><g><title>httploadcli`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (52 samples, 11.69%)</title><rect x="77.5281%" y="117" width="11.6854%" height="15" fill="rgb(215,223,47)" fg:x="345" fg:w="52"/><text x="77.7781%" y="127.50">httploadcli`tokio..</text></g><g><title>httploadcli`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (52 samples, 11.69%)</title><rect x="77.5281%" y="101" width="11.6854%" height="15" fill="rgb(248,225,23)" fg:x="345" fg:w="52"/><text x="77.7781%" y="111.50">httploadcli`&lt;&amp;mio..</text></g><g><title>libsystem_kernel.dylib`__recvfrom (51 samples, 11.46%)</title><rect x="77.7528%" y="85" width="11.4607%" height="15" fill="rgb(250,108,0)" fg:x="346" fg:w="51"/><text x="78.0028%" y="95.50">libsystem_kernel...</text></g><g><title>httploadcli`__rust_alloc (1 samples, 0.22%)</title><rect x="89.4382%" y="101" width="0.2247%" height="15" fill="rgb(228,208,7)" fg:x="398" fg:w="1"/><text x="89.6882%" y="111.50"></text></g><g><title>httploadcli`bytes::bytes_mut::BytesMut::split_to (2 samples, 0.45%)</title><rect x="89.6629%" y="101" width="0.4494%" height="15" fill="rgb(244,45,10)" fg:x="399" fg:w="2"/><text x="89.9129%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.45%)</title><rect x="89.6629%" y="85" width="0.4494%" height="15" fill="rgb(207,125,25)" fg:x="399" fg:w="2"/><text x="89.9129%" y="95.50"></text></g><g><title>httploadcli`http::header::map::HeaderMap&lt;T&gt;::append2 (4 samples, 0.90%)</title><rect x="90.1124%" y="101" width="0.8989%" height="15" fill="rgb(210,195,18)" fg:x="401" fg:w="4"/><text x="90.3624%" y="111.50"></text></g><g><title>httploadcli`http::header::map::hash_elem_using (2 samples, 0.45%)</title><rect x="90.5618%" y="85" width="0.4494%" height="15" fill="rgb(249,80,12)" fg:x="403" fg:w="2"/><text x="90.8118%" y="95.50"></text></g><g><title>httploadcli`http::header::name::HeaderName::from_bytes (3 samples, 0.67%)</title><rect x="91.0112%" y="101" width="0.6742%" height="15" fill="rgb(221,65,9)" fg:x="405" fg:w="3"/><text x="91.2612%" y="111.50"></text></g><g><title>httploadcli`http::header::name::StandardHeader::from_bytes (1 samples, 0.22%)</title><rect x="91.4607%" y="85" width="0.2247%" height="15" fill="rgb(235,49,36)" fg:x="407" fg:w="1"/><text x="91.7107%" y="95.50"></text></g><g><title>httploadcli`httparse::ParserConfig::parse_response_with_uninit_headers (2 samples, 0.45%)</title><rect x="91.6854%" y="101" width="0.4494%" height="15" fill="rgb(225,32,20)" fg:x="408" fg:w="2"/><text x="91.9354%" y="111.50"></text></g><g><title>httploadcli`httparse::Response::parse_with_config_and_uninit_headers (2 samples, 0.45%)</title><rect x="91.6854%" y="85" width="0.4494%" height="15" fill="rgb(215,141,46)" fg:x="408" fg:w="2"/><text x="91.9354%" y="95.50"></text></g><g><title>httploadcli`httparse::parse_headers_iter_uninit (2 samples, 0.45%)</title><rect x="91.6854%" y="69" width="0.4494%" height="15" fill="rgb(250,160,47)" fg:x="408" fg:w="2"/><text x="91.9354%" y="79.50"></text></g><g><title>httploadcli`httparse::simd::runtime::match_header_value_vectored (1 samples, 0.22%)</title><rect x="91.9101%" y="53" width="0.2247%" height="15" fill="rgb(216,222,40)" fg:x="409" fg:w="1"/><text x="92.1601%" y="63.50"></text></g><g><title>httploadcli`httparse::simd::avx2::match_header_value_char_32_avx (1 samples, 0.22%)</title><rect x="91.9101%" y="37" width="0.2247%" height="15" fill="rgb(234,217,39)" fg:x="409" fg:w="1"/><text x="92.1601%" y="47.50"></text></g><g><title>httploadcli`hyper::body::length::DecodedLength::checked_new (1 samples, 0.22%)</title><rect x="92.1348%" y="101" width="0.2247%" height="15" fill="rgb(207,178,40)" fg:x="410" fg:w="1"/><text x="92.3848%" y="111.50"></text></g><g><title>httploadcli`hyper::headers::content_length_parse_all (3 samples, 0.67%)</title><rect x="92.3596%" y="101" width="0.6742%" height="15" fill="rgb(221,136,13)" fg:x="411" fg:w="3"/><text x="92.6096%" y="111.50"></text></g><g><title>httploadcli`core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.22%)</title><rect x="92.8090%" y="85" width="0.2247%" height="15" fill="rgb(249,199,10)" fg:x="413" fg:w="1"/><text x="93.0590%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.45%)</title><rect x="93.0337%" y="101" width="0.4494%" height="15" fill="rgb(249,222,13)" fg:x="414" fg:w="2"/><text x="93.2837%" y="111.50"></text></g><g><title>httploadcli`&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (21 samples, 4.72%)</title><rect x="89.2135%" y="117" width="4.7191%" height="15" fill="rgb(244,185,38)" fg:x="397" fg:w="21"/><text x="89.4635%" y="127.50">httpl..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.45%)</title><rect x="93.4831%" y="101" width="0.4494%" height="15" fill="rgb(236,202,9)" fg:x="416" fg:w="2"/><text x="93.7331%" y="111.50"></text></g><g><title>httploadcli`http::status::StatusCode::canonical_reason (2 samples, 0.45%)</title><rect x="93.9326%" y="117" width="0.4494%" height="15" fill="rgb(250,229,37)" fg:x="418" fg:w="2"/><text x="94.1826%" y="127.50"></text></g><g><title>httploadcli`hyper::proto::h1::role::parse_headers (24 samples, 5.39%)</title><rect x="89.2135%" y="133" width="5.3933%" height="15" fill="rgb(206,174,23)" fg:x="397" fg:w="24"/><text x="89.4635%" y="143.50">httploa..</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (1 samples, 0.22%)</title><rect x="94.3820%" y="117" width="0.2247%" height="15" fill="rgb(211,33,43)" fg:x="420" fg:w="1"/><text x="94.6320%" y="127.50"></text></g><g><title>httploadcli`hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (78 samples, 17.53%)</title><rect x="77.3034%" y="149" width="17.5281%" height="15" fill="rgb(245,58,50)" fg:x="344" fg:w="78"/><text x="77.5534%" y="159.50">httploadcli`hyper::proto::h..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="94.6067%" y="133" width="0.2247%" height="15" fill="rgb(244,68,36)" fg:x="421" fg:w="1"/><text x="94.8567%" y="143.50"></text></g><g><title>httploadcli`hyper::proto::h1::io::ReadStrategy::max (1 samples, 0.22%)</title><rect x="94.8315%" y="149" width="0.2247%" height="15" fill="rgb(232,229,15)" fg:x="422" fg:w="1"/><text x="95.0815%" y="159.50"></text></g><g><title>httploadcli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (82 samples, 18.43%)</title><rect x="76.8539%" y="165" width="18.4270%" height="15" fill="rgb(254,30,23)" fg:x="342" fg:w="82"/><text x="77.1039%" y="175.50">httploadcli`hyper::proto::h1:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.22%)</title><rect x="95.0562%" y="149" width="0.2247%" height="15" fill="rgb(235,160,14)" fg:x="423" fg:w="1"/><text x="95.3062%" y="159.50"></text></g><g><title>httploadcli`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.22%)</title><rect x="95.2809%" y="133" width="0.2247%" height="15" fill="rgb(212,155,44)" fg:x="424" fg:w="1"/><text x="95.5309%" y="143.50"></text></g><g><title>httploadcli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (2 samples, 0.45%)</title><rect x="95.2809%" y="165" width="0.4494%" height="15" fill="rgb(226,2,50)" fg:x="424" fg:w="2"/><text x="95.5309%" y="175.50"></text></g><g><title>httploadcli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (2 samples, 0.45%)</title><rect x="95.2809%" y="149" width="0.4494%" height="15" fill="rgb(234,177,6)" fg:x="424" fg:w="2"/><text x="95.5309%" y="159.50"></text></g><g><title>httploadcli`hyper::proto::h1::io::ReadStrategy::next (1 samples, 0.22%)</title><rect x="95.5056%" y="133" width="0.2247%" height="15" fill="rgb(217,24,9)" fg:x="425" fg:w="1"/><text x="95.7556%" y="143.50"></text></g><g><title>httploadcli`hyper::proto::h1::decode::Decoder::decode (1 samples, 0.22%)</title><rect x="95.7303%" y="165" width="0.2247%" height="15" fill="rgb(220,13,46)" fg:x="426" fg:w="1"/><text x="95.9803%" y="175.50"></text></g><g><title>httploadcli`hyper::proto::h1::decode::Decoder::new (1 samples, 0.22%)</title><rect x="95.9551%" y="165" width="0.2247%" height="15" fill="rgb(239,221,27)" fg:x="427" fg:w="1"/><text x="96.2051%" y="175.50"></text></g><g><title>httploadcli`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (205 samples, 46.07%)</title><rect x="50.5618%" y="213" width="46.0674%" height="15" fill="rgb(222,198,25)" fg:x="225" fg:w="205"/><text x="50.8118%" y="223.50">httploadcli`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::futur..</text></g><g><title>httploadcli`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (205 samples, 46.07%)</title><rect x="50.5618%" y="197" width="46.0674%" height="15" fill="rgb(211,99,13)" fg:x="225" fg:w="205"/><text x="50.8118%" y="207.50">httploadcli`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::F..</text></g><g><title>httploadcli`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (202 samples, 45.39%)</title><rect x="51.2360%" y="181" width="45.3933%" height="15" fill="rgb(232,111,31)" fg:x="228" fg:w="202"/><text x="51.4860%" y="191.50">httploadcli`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.45%)</title><rect x="96.1798%" y="165" width="0.4494%" height="15" fill="rgb(245,82,37)" fg:x="428" fg:w="2"/><text x="96.4298%" y="175.50"></text></g><g><title>httploadcli`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (206 samples, 46.29%)</title><rect x="50.5618%" y="229" width="46.2921%" height="15" fill="rgb(227,149,46)" fg:x="225" fg:w="206"/><text x="50.8118%" y="239.50">httploadcli`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::futur..</text></g><g><title>httploadcli`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.22%)</title><rect x="96.6292%" y="213" width="0.2247%" height="15" fill="rgb(218,36,50)" fg:x="430" fg:w="1"/><text x="96.8792%" y="223.50"></text></g><g><title>httploadcli`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (322 samples, 72.36%)</title><rect x="24.9438%" y="261" width="72.3596%" height="15" fill="rgb(226,80,48)" fg:x="111" fg:w="322"/><text x="25.1938%" y="271.50">httploadcli`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>httploadcli`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (209 samples, 46.97%)</title><rect x="50.3371%" y="245" width="46.9663%" height="15" fill="rgb(238,224,15)" fg:x="224" fg:w="209"/><text x="50.5871%" y="255.50">httploadcli`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.45%)</title><rect x="96.8539%" y="229" width="0.4494%" height="15" fill="rgb(241,136,10)" fg:x="431" fg:w="2"/><text x="97.1039%" y="239.50"></text></g><g><title>httploadcli`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (326 samples, 73.26%)</title><rect x="24.2697%" y="277" width="73.2584%" height="15" fill="rgb(208,32,45)" fg:x="108" fg:w="326"/><text x="24.5197%" y="287.50">httploadcli`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>httploadcli`tokio::runtime::task::state::State::transition_to_running (1 samples, 0.22%)</title><rect x="97.3034%" y="261" width="0.2247%" height="15" fill="rgb(207,135,9)" fg:x="433" fg:w="1"/><text x="97.5534%" y="271.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (339 samples, 76.18%)</title><rect x="21.7978%" y="293" width="76.1798%" height="15" fill="rgb(206,86,44)" fg:x="97" fg:w="339"/><text x="22.0478%" y="303.50">httploadcli`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>httploadcli`tokio::runtime::task::waker::raw_waker (2 samples, 0.45%)</title><rect x="97.5281%" y="277" width="0.4494%" height="15" fill="rgb(245,177,15)" fg:x="434" fg:w="2"/><text x="97.7781%" y="287.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (1 samples, 0.22%)</title><rect x="97.9775%" y="293" width="0.2247%" height="15" fill="rgb(206,64,50)" fg:x="436" fg:w="1"/><text x="98.2275%" y="303.50"></text></g><g><title>httploadcli`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.22%)</title><rect x="98.2022%" y="293" width="0.2247%" height="15" fill="rgb(234,36,40)" fg:x="437" fg:w="1"/><text x="98.4522%" y="303.50"></text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::worker::Context::run (432 samples, 97.08%)</title><rect x="1.5730%" y="309" width="97.0787%" height="15" fill="rgb(213,64,8)" fg:x="7" fg:w="432"/><text x="1.8230%" y="319.50">httploadcli`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.22%)</title><rect x="98.4270%" y="293" width="0.2247%" height="15" fill="rgb(210,75,36)" fg:x="438" fg:w="1"/><text x="98.6770%" y="303.50"></text></g><g><title>libsystem_m.dylib`0x00007ff821b627e0 (2 samples, 0.45%)</title><rect x="98.6517%" y="309" width="0.4494%" height="15" fill="rgb(229,88,21)" fg:x="439" fg:w="2"/><text x="98.9017%" y="319.50"></text></g><g><title>httploadcli`core::ops::function::FnOnce::call_once{{vtable.shim}} (437 samples, 98.20%)</title><rect x="1.1236%" y="453" width="98.2022%" height="15" fill="rgb(252,204,47)" fg:x="5" fg:w="437"/><text x="1.3736%" y="463.50">httploadcli`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>httploadcli`std::sys_common::backtrace::__rust_begin_short_backtrace (437 samples, 98.20%)</title><rect x="1.1236%" y="437" width="98.2022%" height="15" fill="rgb(208,77,27)" fg:x="5" fg:w="437"/><text x="1.3736%" y="447.50">httploadcli`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>httploadcli`tokio::runtime::blocking::pool::Inner::run (436 samples, 97.98%)</title><rect x="1.3483%" y="421" width="97.9775%" height="15" fill="rgb(221,76,26)" fg:x="6" fg:w="436"/><text x="1.5983%" y="431.50">httploadcli`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>httploadcli`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (436 samples, 97.98%)</title><rect x="1.3483%" y="405" width="97.9775%" height="15" fill="rgb(225,139,18)" fg:x="6" fg:w="436"/><text x="1.5983%" y="415.50">httploadcli`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>httploadcli`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (436 samples, 97.98%)</title><rect x="1.3483%" y="389" width="97.9775%" height="15" fill="rgb(230,137,11)" fg:x="6" fg:w="436"/><text x="1.5983%" y="399.50">httploadcli`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>httploadcli`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (436 samples, 97.98%)</title><rect x="1.3483%" y="373" width="97.9775%" height="15" fill="rgb(212,28,1)" fg:x="6" fg:w="436"/><text x="1.5983%" y="383.50">httploadcli`tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>httploadcli`tokio::runtime::scheduler::multi_thread::worker::run (436 samples, 97.98%)</title><rect x="1.3483%" y="357" width="97.9775%" height="15" fill="rgb(248,164,17)" fg:x="6" fg:w="436"/><text x="1.5983%" y="367.50">httploadcli`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>httploadcli`tokio::runtime::context::runtime::enter_runtime (436 samples, 97.98%)</title><rect x="1.3483%" y="341" width="97.9775%" height="15" fill="rgb(222,171,42)" fg:x="6" fg:w="436"/><text x="1.5983%" y="351.50">httploadcli`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>httploadcli`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (436 samples, 97.98%)</title><rect x="1.3483%" y="325" width="97.9775%" height="15" fill="rgb(243,84,45)" fg:x="6" fg:w="436"/><text x="1.5983%" y="335.50">httploadcli`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (1 samples, 0.22%)</title><rect x="99.1011%" y="309" width="0.2247%" height="15" fill="rgb(252,49,23)" fg:x="441" fg:w="1"/><text x="99.3511%" y="319.50"></text></g><g><title>httploadcli`std::sys::unix::thread::Thread::new::thread_start (438 samples, 98.43%)</title><rect x="1.1236%" y="469" width="98.4270%" height="15" fill="rgb(215,19,7)" fg:x="5" fg:w="438"/><text x="1.3736%" y="479.50">httploadcli`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>libsystem_kernel.dylib`__sigaltstack (1 samples, 0.22%)</title><rect x="99.3258%" y="453" width="0.2247%" height="15" fill="rgb(238,81,41)" fg:x="442" fg:w="1"/><text x="99.5758%" y="463.50"></text></g><g><title>all (445 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(210,199,37)" fg:x="0" fg:w="445"/><text x="0.2500%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (441 samples, 99.10%)</title><rect x="0.8989%" y="501" width="99.1011%" height="15" fill="rgb(244,192,49)" fg:x="4" fg:w="441"/><text x="1.1489%" y="511.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (440 samples, 98.88%)</title><rect x="1.1236%" y="485" width="98.8764%" height="15" fill="rgb(226,211,11)" fg:x="5" fg:w="440"/><text x="1.3736%" y="495.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (2 samples, 0.45%)</title><rect x="99.5506%" y="469" width="0.4494%" height="15" fill="rgb(236,162,54)" fg:x="443" fg:w="2"/><text x="99.8006%" y="479.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (2 samples, 0.45%)</title><rect x="99.5506%" y="453" width="0.4494%" height="15" fill="rgb(220,229,9)" fg:x="443" fg:w="2"/><text x="99.8006%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (2 samples, 0.45%)</title><rect x="99.5506%" y="437" width="0.4494%" height="15" fill="rgb(250,87,22)" fg:x="443" fg:w="2"/><text x="99.8006%" y="447.50"></text></g></svg></svg>